<?php

/**
 * CSSTidy - CSS Parser and Optimiser
 *
 * CSS Optimising Class
 * This class optimises CSS data generated by csstidy.
 *
 * Copyright 2005, 2006, 2007 Florian Schmitz
 *
 * This file is part of CSSTidy.
 *
 *   CSSTidy is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU Lesser General Public License as published by
 *   the Free Software Foundation; either version 2.1 of the License, or
 *   (at your option) any later version.
 *
 *   CSSTidy is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU Lesser General Public License for more details.
 * 
 *   You should have received a copy of the GNU Lesser General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @license http://opensource.org/licenses/lgpl-license.php GNU Lesser General Public License
 * @package csstidy
 * @author Florian Schmitz (floele at gmail dot com) 2005-2007
 * @author Brett Zamir (brettz9 at yahoo dot com) 2007
 * @author Nikolay Matsievsky (speed at webo dot name) 2009-2010
 * @author Jakub Onderka (acci at acci dot cz) 2011
 */
namespace CSSTidy;
/**
 * CSS Optimising Class
 *
 * This class optimises CSS data generated by csstidy.
 *
 * @package csstidy
 * @author Florian Schmitz (floele at gmail dot com) 2005-2006
 * @version 1.0
 */
class Optimise
{
    /** @var \CSSTidy\Logger */
    protected $logger;

    /** @var \CSSTidy\Configuration */
    protected $configuration;

    /**
     * Properties that allow <color> as value
     *
     * @todo CSS3 properties
     * @see compressNumbers();
     * @static
     * @var array
     */
    public static $colorValues = array(
        'background-color' => true,
        'border-color' => true,
        'border-top-color' => true,
        'border-right-color' => true,
        'border-bottom-color' => true,
        'border-left-color' => true,
        'color' => true,
        'outline-color' => true
    );

    /**
     * All CSS units (CSS 3 units included)
     *
     * @see http://www.w3.org/TR/css3-values/
     * @see compressNumbers()
     * @static
     * @var array
     */
    public static $units = array(
        // Absolute lengths
        'px','in','cm','mm','pt','pc',
        // Relative lengths
        '%','em','rem','ex','ch','vw','vh','vm',
        // Angle
        'deg','grad','rad','turn',
        // Time
        'ms','s',
        // Frequency
        'khz','hz',
        // Layout-specific
        'fr', 'gr',
        // Resolution
        'dpi','dpcm','dppx',
        // Speech
        'db', 'st'
    );

    /**
     * Properties that need a value with unit
     *
     * @todo CSS3 properties
     * @todo Background property realy need unit?
     * @see compressNumbers();
     * @static
     * @var array
     */
    public static $unitValues = array (
        'background', 'background-position', 'border', 'border-top', 'border-right', 'border-bottom', 'border-left',
        'border-width', 'border-top-width', 'border-right-width', 'border-left-width', 'border-bottom-width', 'bottom',
        'border-spacing', 'font-size', 'height', 'left', 'margin', 'margin-top', 'margin-right', 'margin-bottom',
        'margin-left', 'max-height', 'max-width', 'min-height', 'min-width', 'outline', 'outline-width', 'padding',
        'padding-top', 'padding-right', 'padding-bottom', 'padding-left', 'right', 'top', 'text-indent',
        'letter-spacing', 'word-spacing', 'width'
    );

    /**
     * A list of all shorthand properties that are devided into four properties and/or have four subvalues
     *
     * @todo Are there new ones in CSS3?
     * @see dissolveFourValueShorthands()
     * @see mergeFourValueShorthands()
     * @var array
     */
    public static $shorthands = array(
        'border-color' => array('border-top-color','border-right-color','border-bottom-color','border-left-color'),
        'border-style' => array('border-top-style','border-right-style','border-bottom-style','border-left-style'),
        'border-width' => array('border-top-width','border-right-width','border-bottom-width','border-left-width'),
        'margin' => array('margin-top','margin-right','margin-bottom','margin-left'),
        'padding' => array('padding-top','padding-right','padding-bottom','padding-left'),
        'border-radius' => array('border-radius-top-left', 'border-radius-top-right', 'border-radius-bottom-right', 'border-radius-bottom-left')
    );

    public static $twoValuesShorthand = array(
        'overflow' => array('overflow-x', 'overflow-y'),
        'pause' => array('pause-before', 'pause-after'),
        'rest' => array('rest-before', 'rest-after'),
        'cue' => array('cue-before', 'cue-after'),
    );

    /**
     * A list of non-W3C color names which get replaced by their hex-codes
     *
     * @see cutColor()
     * @var array
     */
    public static $replaceColors = array(
        'aliceblue' => '#f0f8ff',
        'antiquewhite' => '#faebd7',
        'aquamarine' => '#7fffd4',
        'azure' => '#f0ffff',
        'beige' => '#f5f5dc',
        'bisque' => '#ffe4c4',
        'blanchedalmond' => '#ffebcd',
        'blueviolet' => '#8a2be2',
        'brown' => '#a52a2a',
        'burlywood' => '#deb887',
        'cadetblue' => '#5f9ea0',
        'chartreuse' => '#7fff00',
        'chocolate' => '#d2691e',
        'coral' => '#ff7f50',
        'cornflowerblue' => '#6495ed',
        'cornsilk' => '#fff8dc',
        'crimson' => '#dc143c',
        'cyan' => '#00ffff',
        'darkblue' => '#00008b',
        'darkcyan' => '#008b8b',
        'darkgoldenrod' => '#b8860b',
        'darkgray' => '#a9a9a9',
        'darkgreen' => '#006400',
        'darkkhaki' => '#bdb76b',
        'darkmagenta' => '#8b008b',
        'darkolivegreen' => '#556b2f',
        'darkorange' => '#ff8c00',
        'darkorchid' => '#9932cc',
        'darkred' => '#8b0000',
        'darksalmon' => '#e9967a',
        'darkseagreen' => '#8fbc8f',
        'darkslateblue' => '#483d8b',
        'darkslategray' => '#2f4f4f',
        'darkturquoise' => '#00ced1',
        'darkviolet' => '#9400d3',
        'deeppink' => '#ff1493',
        'deepskyblue' => '#00bfff',
        'dimgray' => '#696969',
        'dodgerblue' => '#1e90ff',
        'feldspar' => '#d19275',
        'firebrick' => '#b22222',
        'floralwhite' => '#fffaf0',
        'forestgreen' => '#228b22',
        'gainsboro' => '#dcdcdc',
        'ghostwhite' => '#f8f8ff',
        'gold' => '#ffd700',
        'goldenrod' => '#daa520',
        'greenyellow' => '#adff2f',
        'honeydew' => '#f0fff0',
        'hotpink' => '#ff69b4',
        'indianred' => '#cd5c5c',
        'indigo' => '#4b0082',
        'ivory' => '#fffff0',
        'khaki' => '#f0e68c',
        'lavender' => '#e6e6fa',
        'lavenderblush' => '#fff0f5',
        'lawngreen' => '#7cfc00',
        'lemonchiffon' => '#fffacd',
        'lightblue' => '#add8e6',
        'lightcoral' => '#f08080',
        'lightcyan' => '#e0ffff',
        'lightgoldenrodyellow' => '#fafad2',
        'lightgrey' => '#d3d3d3',
        'lightgreen' => '#90ee90',
        'lightpink' => '#ffb6c1',
        'lightsalmon' => '#ffa07a',
        'lightseagreen' => '#20b2aa',
        'lightskyblue' => '#87cefa',
        'lightslateblue' => '#8470ff',
        'lightslategray' => '#778899',
        'lightsteelblue' => '#b0c4de',
        'lightyellow' => '#ffffe0',
        'limegreen' => '#32cd32',
        'linen' => '#faf0e6',
        'magenta' => '#ff00ff',
        'mediumaquamarine' => '#66cdaa',
        'mediumblue' => '#0000cd',
        'mediumorchid' => '#ba55d3',
        'mediumpurple' => '#9370d8',
        'mediumseagreen' => '#3cb371',
        'mediumslateblue' => '#7b68ee',
        'mediumspringgreen' => '#00fa9a',
        'mediumturquoise' => '#48d1cc',
        'mediumvioletred' => '#c71585',
        'midnightblue' => '#191970',
        'mintcream' => '#f5fffa',
        'mistyrose' => '#ffe4e1',
        'moccasin' => '#ffe4b5',
        'navajowhite' => '#ffdead',
        'oldlace' => '#fdf5e6',
        'olivedrab' => '#6b8e23',
        'orangered' => '#ff4500',
        'orchid' => '#da70d6',
        'palegoldenrod' => '#eee8aa',
        'palegreen' => '#98fb98',
        'paleturquoise' => '#afeeee',
        'palevioletred' => '#d87093',
        'papayawhip' => '#ffefd5',
        'peachpuff' => '#ffdab9',
        'peru' => '#cd853f',
        'pink' => '#ffc0cb',
        'plum' => '#dda0dd',
        'powderblue' => '#b0e0e6',
        'rosybrown' => '#bc8f8f',
        'royalblue' => '#4169e1',
        'saddlebrown' => '#8b4513',
        'salmon' => '#fa8072',
        'sandybrown' => '#f4a460',
        'seagreen' => '#2e8b57',
        'seashell' => '#fff5ee',
        'sienna' => '#a0522d',
        'skyblue' => '#87ceeb',
        'slateblue' => '#6a5acd',
        'slategray' => '#708090',
        'snow' => '#fffafa',
        'springgreen' => '#00ff7f',
        'steelblue' => '#4682b4',
        'tan' => '#d2b48c',
        'thistle' => '#d8bfd8',
        'tomato' => '#ff6347',
        'turquoise' => '#40e0d0',
        'violet' => '#ee82ee',
        'violetred' => '#d02090',
        'wheat' => '#f5deb3',
        'whitesmoke' => '#f5f5f5',
        'yellowgreen' => '#9acd32'
    );

    /**
     * Default values for the background properties
     *
     * @todo Possibly property names will change during CSS3 development
     * @see dissolveShortBackground()
     * @see merge_bg()
     * @var array
     */
    public static $backgroundPropDefault = array(
        'background-image' => 'none',
        'background-size' => 'auto',
        'background-repeat' => 'repeat',
        'background-position' => '0 0',
        'background-attachment' => 'scroll',
        'background-clip' => 'border',
        'background-origin' => 'padding',
        'background-color' => 'transparent'
    );

    /**
     * Default values for the font properties
     *
     * @see mergeFonts()
     * @var array
     */
    public static $fontPropDefault = array(
        'font-style' => 'normal',
        'font-variant' => 'normal',
        'font-weight' => 'normal',
        'font-size' => '',
        'line-height' => '',
        'font-family' => '',
    );

    /**
     * @param Logger $logger
     * @param Configuration $configuration
     */
    public function __construct(Logger $logger, Configuration $configuration)
    {
        $this->logger = $logger;
        $this->configuration = $configuration;
    }

    /**
     * @param Parsed $parsed
     * @return mixed
     */
    public function postparse(Parsed $parsed)
    {
        if ($this->configuration->getPreserveCss()) {
            return;
        }

        if ($this->configuration->getDiscardInvalidSelectors()) {
            $this->discardInvalidSelectors($parsed);
        }

        if ($this->configuration->getMergeSelectors() === Configuration::MERGE_SELECTORS) {
            $this->mergeSelectors($parsed);
        }

        if ($this->configuration->getOptimiseShorthands() > Configuration::NOTHING) {
            $this->postparseBlock($parsed);
        }
    }

    public function postparseBlock(Block $block)
    {
        $this->dissolveShorthands($block);

        $this->mergeFourValueShorthands($block);
        $this->mergeTwoValuesShorthand($block);

        if ($this->configuration->getOptimiseShorthands() >= Configuration::FONT) {
            $this->mergeFont($block);

            if ($this->configuration->getOptimiseShorthands() >= Configuration::BACKGROUND) {
                $this->mergeBackground($block);

                if (empty($block->properties)) {
                    unset($block);
                }
            }
        }

        if (isset($block) && $block instanceof AtBlock) {
            foreach ($block->properties as $value) {
                if ($value instanceof Block) {
                    $this->postparseBlock($value);
                }
            }
        }
    }

    /**
     * Optimises values
     * @param string $property
     * @param string $value
     * @return string
     */
    public function value($property, $value)
    {
        // optimise shorthand properties
        if (isset(self::$shorthands[$property])) {
            if ($property === 'border-radius') {
                $temp = $this->borderRadiusShorthand($value);
            } else {
                $temp = $this->compressShorthand($value); // FIXME - move
            }
            if ($temp != $value) {
                $this->logger->log("Optimised shorthand notation ($property): Changed '$value' to '$temp'", Logger::INFORMATION);
            }
            $value = $temp;
        }

        if ($property === 'background-image' && $this->configuration->getCompressColors()) {
            $value = $this->optimizeGradients($value);
        } else if ($this->removeVendorPrefix($property) === 'transform') {
            $value = $this->optimizeTransform($value);
        }

        // Remove whitespace at ! important
        $tmp = $this->compressImportant($value);
        if ($value != $tmp) {
            $value = $tmp;
            $this->logger->log('Optimised !important', Logger::INFORMATION);
        }

        return $value;
    }

    /**
     * Optimises a sub-value
     * @version 1.1
     * @param string $property
     * @param string $subValue
     * @return string
     */
    public function subValue($property, $subValue)
    {
        $important = '';
        if (CSSTidy::isImportant($subValue)) {
            $important = '!important';
            $subValue = CSSTidy::removeImportant($subValue, false);
        }

        // Compress font-weight
        if ($property === 'font-weight' && $this->configuration->getCompressFontWeight()) {
            static $optimizedFontWeight = array('bold' => 700, 'normal' => 400);
            if (isset($optimizedFontWeight[$subValue])) {
                $optimized = $optimizedFontWeight[$subValue];
                $this->logger->log("Optimised font-weight: Changed '$subValue' to '$optimized'", Logger::INFORMATION);
                $subValue = $optimized;
            }

            return $subValue . $important;
        }

        $subValue = $this->compressNumbers($property, $subValue);

        if ($this->configuration->getCompressColors()) {
            $temp = $this->cutColor($subValue);
            if ($temp !== $subValue) {
                if (isset(self::$replaceColors[$subValue])) {
                    $this->logger->log("Fixed invalid color name: Changed '{$subValue}' to '{$temp}'", Logger::WARNING);
                } else {
                    $this->logger->log("Optimised color: Changed '{$subValue}' to '{$temp}'", Logger::INFORMATION);
                }
                $subValue = $temp;
            }
        }

        $subValue = $this->optimizeCalc($subValue);

        return $subValue . $important;
    }

    /**
     * Removes unnecessary whitespace in ! important
     * @param string $string
     * @return string
     * @access public
     * @version 1.1
     */
    public function compressImportant($string)
    {
        if (CSSTidy::isImportant($string)) {
            return CSSTidy::removeImportant($string, false) . '!important';
        }

        return $string;
    }

    /**
     * @param Element $block
     */
    protected function dissolveShorthands(Block $block)
    {
        if (isset($block->properties['font']) && $this->configuration->getOptimiseShorthands() > Configuration::COMMON) {
            $value = $block->properties['font'];
            $block->properties['font'] = '';
            $block->mergeProperties($this->dissolveShortFont($value));
        }

        if (isset($block->properties['background']) && $this->configuration->getOptimiseShorthands() > Configuration::FONT) {
            $value = $block->properties['background'];
            $block->properties['background'] = '';
            $block->mergeProperties($this->dissolveShortBackground($value));
        }

        foreach (self::$shorthands as $shorthand => $foo) {
            if (isset($block->properties[$shorthand])) {
                $block->mergeProperties($this->dissolveFourValueShorthands($shorthand, $block->properties[$shorthand]));
                $block->properties[$shorthand] = '';
            }
        }
    }

    /**
     * Optimize border-radius property
     *
     * @param string $value
     * @return string
     */
    protected function borderRadiusShorthand($value)
    {
        $parts = explode('/', $value);

        if (empty($parts)) { // / delimiter in string not found
            return $value;
        }

        if (isset($parts[2])) {
            return $value; // border-radius value can contains only two parts
        }

        foreach ($parts as &$part) {
            $part = $this->compressShorthand(trim($part));
        }

        return implode('/', $parts);
    }

    /**
     * Compresses shorthand values. Example: margin:1px 1px 1px 1px -> margin:1px
     * @param string $value
     * @return string
     * @version 1.0
     */
    protected function compressShorthand($value)
    {
        $important = false;
        if (CSSTidy::isImportant($value)) {
            $value = CSSTidy::removeImportant($value, false);
            $important = true;
        }

        $values = $this->explodeWs(' ', $value);

        return $this->compressShorthandValues($values, $important);
    }

    /**
     * @param array $values
     * @param bool $isImportant
     * @return string
     */
    protected function compressShorthandValues(array $values, $isImportant)
    {
        $important = $isImportant ? '!important' : '';

        switch (count($values)) {
            case 4:
                if ($values[0] == $values[1] && $values[0] == $values[2] && $values[0] == $values[3]) {
                    return $values[0] . $important;
                } else if ($values[1] == $values[3] && $values[0] == $values[2]) {
                    return $values[0] . ' ' . $values[1] . $important;
                } else if ($values[1] == $values[3]) {
                    return $values[0] . ' ' . $values[1] . ' ' . $values[2] . $important;
                }
                break;

            case 3:
                if ($values[0] == $values[1] && $values[0] == $values[2]) {
                    return $values[0] . $important;
                } else if ($values[0] == $values[2]) {
                    return $values[0] . ' ' . $values[1] . $important;
                }
                break;

            case 2:
                if ($values[0] == $values[1]) {
                    return $values[0] . $important;
                }
                break;
        }

        return implode(' ', $values);
    }

    /**
     * Color compression function. Converts all rgb() values to #-values and uses the short-form if possible.
     * Also replaces 4 color names by #-values.
     * @param string $color
     * @return string
     * @version 1.1
     */
    protected function cutColor($color) 
    {
        static $shorterNames = array(
            /* color name -> hex code */
            'black' => '#000',
            'fuchsia' => '#f0f',
            'white' => '#fff',
            'yellow' => '#ff0',

            /* hex code -> color name */
            '#800000' => 'maroon',
            '#ffa500' => 'orange',
            '#808000' => 'olive',
            '#800080' => 'purple',
            '#008000' => 'green',
            '#000080' => 'navy',
            '#008080' => 'teal',
            '#c0c0c0' => 'silver',
            '#808080' => 'gray',
            '#f00' => 'red',
        );

        // rgb(0,0,0) -> #000000 (or #000 in this case later)
        $type = strtolower(strstr($color, '(', true));

        if ($type === 'rgb' || $type === 'hsl' ) {
            $colorTmp = substr($color, 4, -1);
            $colorTmp = explode(',', $colorTmp);

            if (count($colorTmp) > 3) {
                $this->logger->log("RGB or HSL color value supports only three items", Logger::WARNING);
                $colorTmp = array_slice($colorTmp, 0, 3);
            } else if (count($colorTmp) !== 3) {
                $this->logger->log("RGB or HSL color value supports only three items", Logger::ERROR);
                return $color;
            }

            if ($type === 'rgb') {
                $color = $this->convertRgbToHex($colorTmp);
            } else {
                $color = $this->convertHslToHex($colorTmp);
            }
        } else if ($type === 'rgba' || $type === 'hsla') {
            $colorTmp = substr($color, 5, -1);
            $colorTmp = explode(',', $colorTmp);

            if (count($colorTmp) > 4) {
                $this->logger->log(strtoupper($type) . " color value supports only four items", Logger::WARNING);
                $colorTmp = array_slice($colorTmp, 0, 4);
            } else if (count($colorTmp) !== 4) {
                $this->logger->log(strtoupper($type) ." color value supports only four items", Logger::ERROR);
                return $color;
            }

            if ($colorTmp[3] == 1) { // no alpha is set -> convert to HEX
                $colorTmp = array_slice($colorTmp, 0, 3);
                $color = ($type === 'rgba' ? $this->convertRgbToHex($colorTmp) : $this->convertHslToHex($colorTmp));
            } else if ($colorTmp[3] == 0) { // full transparency
                $color = 'rgba(0,0,0,0)';
            } else {
                if ($type === 'hsla') {
                    $colorTmp[0] = $this->compressAngle($colorTmp[0]);
                } else if ($colorTmp[0] == 255 && $colorTmp[1] == 255 && $colorTmp[2] == 255) {
                    $colorTmp[0] = $colorTmp[1] = 0;
                    $colorTmp[2] = '100%';
                    $type = 'hsla';
                }
                $color = "$type($colorTmp[0],$colorTmp[1],$colorTmp[2],{$this->compressNumber($colorTmp[3])})";
            }
        } else {
            // Fix bad color names
            if (isset(self::$replaceColors[strtolower($color)])) {
                $color = self::$replaceColors[strtolower($color)];
            }
        }
            // strlen($color) === 7
        if (isset($color{6}) && !isset($color{7}) && $color{0} === '#') {
            $color = strtolower($color); // Lower hex color for better gziping

            // #aabbcc -> #abc
            if ($color{1} === $color{2} && $color{3} === $color{4} && $color{5} === $color{6}) {
                $color = '#' . $color{1} . $color{3} . $color{5};
            }
        }

        if (isset($shorterNames[strtolower($color)])) {
            $color = $shorterNames[strtolower($color)];
        }

        return $color;
    }

    /**
     * Convert from [R, G, B] array to hex string. Array item must be number from 0-255 or
     * percentage value.
     *
     * @param array $parts [R, G, B]
     * @return string
     */
    protected function convertRgbToHex(array $parts)
    {
        foreach ($parts as &$part) {
            $part = trim($part);

            if (substr($part, -1) === '%') {
                $part = round((255 * $part) / 100);
            }
        }

        return $this->threeByteArrayToHex($parts);
    }

    /**
     * Convert color from HSL to HEX RGB
     * @param array $parts [H, S, L]
     * @return string HEX color
     */
    protected function convertHslToHex(array $parts)
    {
        list ($h, $s, $l) = $parts;

        $h = ((($h % 360) + 360) % 360) / 360;

        $normalizeSOrL = function($value, $name) {
            if (!substr($value, -1) === '%') {
                $this->logger->log("HSL $name must be a percent value", Logger::WARNING);
            }

            if ((int) $value > 100) {
                $this->logger->log("HSL $name must be lower than 100%", Logger::WARNING);
            }

            return (int) $value / 100;
        };

        $s = $normalizeSOrL($s, 'saturation');
        $l = $normalizeSOrL($l, 'light');

        $m2 = ($l <= 0.5) ? $l * ($s + 1) : ($l + $s - $l * $s);
        $m1 = $l * 2 - $m2;

        $output = array();

        foreach (array($h + 1/3, $h, $h - 1/3) as $mH) {
            if ($mH < 0) {
                ++$mH;
            } else if ($mH > 1) {
                --$mH;
            }

            if ($mH * 6 < 1) {
                $output[] = $m1 + ($m2 - $m1) * $mH * 6;
            } else if ($mH * 2 < 1) {
                $output[] = $m2;
            } else if ($mH * 3 < 2) {
                $output[] = $m1 + ($m2 - $m1) * (2/3 - $mH) * 6;
            } else {
                $output[] = $m1;
            }
        }

        // Convert back to 1 -> 255
        foreach ($output as &$rgb) {
            $rgb = round($rgb * 255);
        }

        return $this->threeByteArrayToHex($output);
    }

    /**
     * Convert array with three item from 0-255 to corresponding HEX value.
     * @param array $array [R, G, B]
     * @return string Color (in format #ffffff)
     */
    protected function threeByteArrayToHex(array $array)
    {
        $hex = '#';

        foreach ($array as $byte) {
            if ($byte < 16) {
                if ($byte < 0) {
                    $byte = 0;
                }
                $hex .= '0' . dechex($byte);
            } else {
                if ($byte > 255) {
                    $byte = 255;
                }
                $hex .= dechex($byte);
            }
        }

        return $hex;
    }

    /**
     * Compresses numbers (ie. 1.0 becomes 1 or 1.100 becomes 1.1 )
     * @param string $property
     * @param string $subValue
     * @return string
     */
    protected function compressNumbers($property, $subValue)
    {
        // for font:1em/1em sans-serif...;
        if ($property === 'font') {
            $parts = explode('/', $subValue);
        } else {
            $parts = array($subValue);
        }

        foreach ($parts as &$part) {
            // if we are not dealing with a number at this point, do not optimise anything
            $number = $this->analyseCssNumber($part);
            if ($number === false) {
                return $subValue;
            }

            // Fix bad colors
            if (isset(self::$colorValues[$property])) {
                if ($this->checkHexValue($part)) {
                    $part = '#' . $part;
                    continue;
                } else {
                    $this->logger->log("Invalid color value '$part' for property '$property'", Logger::ERROR);
                }
            }

            if (abs($number[0]) > 0) {
                if ($number[1] === '' && in_array($property, self::$unitValues, true)) {
                    $number[1] = 'px';
                    $this->logger->log("Fixed invalid number: Added 'px' unit to '$part'", Logger::WARNING);
                }
            } else if ($number[1] !== '') {
                $this->logger->log("Optimised number: Removed unit '{$number[1]}' from '{$part}'", Logger::INFORMATION);
                $number[1] = '';
            }

            $part = $number[0] . $number[1];
        }

        return (isset($parts[1]) ? $parts[0] . '/' . $parts[1] : $parts[0]);
    }

    /**
     * Checks if a given string is a CSS valid number. If it is,
     * an array containing the value and unit is returned
     * @param string $string
     * @return array ('unit' if unit is found or '' if no unit exists, number value) or false if no number
     */
    protected function analyseCssNumber($string)
    {
        // most simple checks first
        if (!isset($string{0}) || $string{0} === '#' || ctype_alpha($string{0})) {
            return false;
        } else if ($string === '0') {
            return array(0, '');
        } else if (!preg_match('~([-]?([0-9]*\.[0-9]+|[0-9]+))(.*)~si', $string, $matches)) {
            return false; // Value is not a number
        }

        list(, $value, , $unit) = $matches;

        if ($value === '') {
            return false;
        }

        $value = $optimisedValue = trim($value);
        $unit = $optimisedUnit = strtolower(trim($unit));

        if ($unit !== '' && !in_array($unit, self::$units)) {
            return false; // Unit is not supported
        }

        if ($this->configuration->getConvertUnit()) {
            list($optimisedValue, $optimisedUnit) = $this->unitConvert($value, $unit);
        }

        $optimisedValue = $this->compressNumber($optimisedValue);

        if ($optimisedUnit !== $unit) {
            $this->logger->log("Optimised number: Converted from '{$value}{$unit}' to '{$optimisedValue}{$optimisedUnit}'", Logger::INFORMATION);
        } else if ($optimisedValue != $value) {
            $this->logger->log("Optimised number: Optimised from '{$value}{$unit}' to '{$optimisedValue}{$optimisedUnit}'", Logger::INFORMATION);
        }

        return array($optimisedValue, $optimisedUnit);
    }

    /**
     * Removes 0 from decimal number between -1 - 1
     * Example: 0.3 -> .3; -0.3 -> -.3
     * @param string $string
     * @return string without any non numeric character
     */
    protected function compressNumber($string)
    {
        $float = floatval($string);
        if (abs($float) > 0 && abs($float) < 1) {
            if ($float < 0) {
                return '-' . ltrim(substr($float, 1), '0');
            } else {
                return ltrim($float, '0');
            }
        }

        return $float;
    }

    /**
     * @param int $angle
     * @return int
     */
    protected function compressAngle($angle)
    {
        $angle = (($angle % 360) + 360) % 360; // normalize from 0 to 359

        if ($angle > 350) {
            $angle -= 360;
        }

        return $angle;
    }

    /**
     * Merges selectors with same properties. Example: a{color:red} b{color:red} -> a,b{color:red}
     * Very basic and has at least one bug. Hopefully there is a replacement soon.
     * @param array $array
     */
    protected function mergeSelectors(Block $block)
    {
        reset($block->properties);
        while (($value = current($block->properties)) instanceof Block) {
            $sameSelectors = array();
            foreach ($block->properties as $pos => $val) {
                if (!$val instanceof Block) {
                    continue;
                }

                if ($val->properties == $value->properties && $val !== $value) {
                    $sameSelectors[] = $pos;
                }
            }

            if (!empty($sameSelectors)) {
                $newSelector = $value->name;
                foreach ($sameSelectors as $sameSelectorKey) {
                    $newSelector .= ',' . $block->properties[$sameSelectorKey]->name;
                    unset($block->properties[$sameSelectorKey]);
                }
                $value->name = $newSelector;
            }

            $this->mergeSelectors($value);
            next($block->properties);
        }
    }

    /**
     * Removes invalid selectors and their corresponding rule-sets as
     * defined by 4.1.7 in REC-CSS2. This is a very rudimentary check
     * and should be replaced by a full-blown parsing algorithm or
     * regular expression
     * @version 1.4
     * @param Element $block
     */
    protected function discardInvalidSelectors(Block $block)
    {
        foreach ($block->properties as $key => $selector) {
            if ($selector instanceof AtBlock) {
                $this->discardInvalidSelectors($selector);
                continue;
            } else if (!$selector instanceof Block) {
                continue;
            }

            $ok = true;
            $selectors = array_map('trim', explode(',', $selector->name));

            foreach ($selectors as $s) {
                $simpleSelectors = preg_split('/\s*[+>~\s]\s*/', $s);
                foreach ($simpleSelectors as $ss) {
                    if ($ss === '') {
                        $ok = false;
                        break 2;
                    }
                    // could also check $ss for internal structure,
                    // but that probably would be too slow
                }
            }

            if (!$ok) {
                unset($block->properties[$key]);
            }
        }
    }

    /**
     * Dissolves properties like padding:10px 10px 10px to padding-top:10px;padding-bottom:10px;...
     * @param string $property
     * @param string $value
     * @return array
     */
    protected function dissolveFourValueShorthands($property, $value)
    {
        $shorthands = self::$shorthands[$property];

        $important = '';
        if (CSSTidy::isImportant($value)) {
            $value = CSSTidy::removeImportant($value, false);
            $important = '!important';
        }

        $values = $this->explodeWs(' ', $value);

        $return = array();
        switch (count($values)) {
            case 4:
                for ($i = 0; $i < 4; $i++) {
                    $return[$shorthands[$i]] = $values[$i] . $important;
                }
                break;

            case 3:
                $return[$shorthands[0]] = $values[0] . $important;
                $return[$shorthands[1]] = $values[1] . $important;
                $return[$shorthands[3]] = $values[1] . $important;
                $return[$shorthands[2]] = $values[2] . $important;
                break;

            case 2:
                for ($i = 0; $i < 4; $i++) {
                    $return[$shorthands[$i]] = $values[$i % 2] . $important;
                }
                break;

            default:
                for ($i = 0; $i < 4; $i++) {
                    $return[$shorthands[$i]] = $values[0] . $important;
                }
                break;
        }

        return $return;
    }

    /**
     * Merges Shorthand properties again, the opposite of self::dissolveFourValueShorthands
     * @param Element $block
     */
    protected function mergeFourValueShorthands(Block $block)
    {
        foreach (self::$shorthands as $shorthand => $properties) {
            if (
                isset($block->properties[$properties[0]]) &&
                isset($block->properties[$properties[1]]) &&
                isset($block->properties[$properties[2]]) &&
                isset($block->properties[$properties[3]])
            ) {

                $important = false;
                $values = array();
                foreach ($properties as $property) {
                    $val = $block->properties[$property];
                    if (CSSTidy::isImportant($val)) {
                        $important = true;
                        $values[] = CSSTidy::removeImportant($val, false);
                    } else {
                        $values[] = $val;
                    }
                    unset($block->properties[$property]);
                }

                $block->properties[$shorthand] = $this->compressShorthandValues($values, $important);
            }
        }
    }

    /**
     * @param Element $block
     */
    protected function mergeTwoValuesShorthand(Block $block)
    {
        foreach (self::$twoValuesShorthand as $shorthandProperty => $properties) {
            if (
                isset($block->properties[$properties[0]]) &&
                isset($block->properties[$properties[1]])
            ) {
                $first = $block->properties[$properties[0]];
                $second = $block->properties[$properties[1]];

                if (CSSTidy::isImportant($first) !== CSSTidy::isImportant($second)) {
                    continue;
                }

                $important = CSSTidy::isImportant($first) ? '!important' : '';

                if ($important) {
                    $first = CSSTidy::removeImportant($first, false);
                    $second = CSSTidy::removeImportant($second, false);
                }

                if ($first == $second) {
                    $output = $first . $important;
                } else {
                    $output = "$first $second$important";
                }

                $block->properties[$shorthandProperty] = $output;
                unset($block->properties[$properties[0]], $block->properties[$properties[1]]);
            }
        }
    }


    /**
     * Dissolve background property
     * @param string $str_value
     * @return array
     * @todo full CSS 3 compliance
     */
    protected function dissolveShortBackground($str_value)
    {
        // don't try to explose background gradient !
        if (stripos($str_value, "gradient(") !== false) {
            return array('background' => $str_value);
        }
        
        static $repeat = array('repeat', 'repeat-x', 'repeat-y', 'no-repeat', 'space');
        static $attachment = array('scroll', 'fixed', 'local');
        static $clip = array('border', 'padding');
        static $origin = array('border', 'padding', 'content');
        static $pos = array('top', 'center', 'bottom', 'left', 'right');

        $return = array(
            'background-image' => null,
            'background-size' => null,
            'background-repeat' => null,
            'background-position' => null,
            'background-attachment' => null,
            'background-clip' => null,
            'background-origin' => null,
            'background-color' => null
        );

        $important = '';
        if (CSSTidy::isImportant($str_value)) {
            $important = ' !important';
            $str_value = CSSTidy::removeImportant($str_value, false);
        }

        $str_value = $this->explodeWs(',', $str_value);
        foreach ($str_value as $strVal) {
            $have = array(
                'clip' => false,
                'pos' => false,
                'color' => false,
                'bg' => false,
            );

            if (is_array($strVal)) {
                $strVal = $strVal[0];
            }

            $strVal = $this->explodeWs(' ', trim($strVal));

            foreach ($strVal as $current) {
                if ($have['bg'] === false && (substr($current, 0, 4) === 'url(' || $current === 'none')) {
                    $return['background-image'] .= $current . ',';
                    $have['bg'] = true;
                } else if (in_array($current, $repeat, true)) {
                    $return['background-repeat'] .= $current . ',';
                } else if (in_array($current, $attachment, true)) {
                    $return['background-attachment'] .= $current . ',';
                } else if (in_array($current, $clip, true) && !$have['clip']) {
                    $return['background-clip'] .= $current . ',';
                    $have['clip'] = true;
                } else if (in_array($current, $origin, true)) {
                    $return['background-origin'] .= $current . ',';
                } else if ($current{0} === '(') {
                    $return['background-size'] .= substr($current, 1, -1) . ',';
                } else if (in_array($current, $pos, true) || is_numeric($current{0}) || $current{0} === null || $current{0} === '-' || $current{0} === '.') {
                    $return['background-position'] .= $current . ($have['pos'] ? ',' : ' ');
                    $have['pos'] = true;
                } else if (!$have['color']) {
                    $return['background-color'] .= $current . ',';
                    $have['color'] = true;
                }
            }
        }

        foreach (self::$backgroundPropDefault as $backgroundProperty => $defaultValue) {
            if ($return[$backgroundProperty] !== null) {
                $return[$backgroundProperty] = substr($return[$backgroundProperty], 0, -1) . $important;
            } else {
                $return[$backgroundProperty] = $defaultValue . $important;
            }
        }

        return $return;
    }

    /**
     * Merges all background properties
     * @param array $inputCss
     * @return array
     * @version 1.0
     * @see dissolve_short_bg()
     * @todo full CSS 3 compliance
     */
    protected function mergeBackground(Block $block)
    {
        // Max number of background images. CSS3 not yet fully implemented
        $numberOfValues = @max(count($this->explodeWs(',', $block->properties['background-image'])), count($this->explodeWs(',', $block->properties['background-color'])), 1);
        // Array with background images to check if BG image exists
        $bg_img_array = @$this->explodeWs(',', CSSTidy::removeImportant($block->properties['background-image']));
        $newBackgroundValue = '';
        $important = '';

        // if background properties is here and not empty, don't try anything
        if (isset($block->properties['background']) && $block->properties['background']) {
            return $block->properties;
        }
        
        for ($i = 0; $i < $numberOfValues; $i++) {
            foreach (self::$backgroundPropDefault as $bg_property => $defaultValue) {
                // Skip if property does not exist
                if (!isset($block->properties[$bg_property])) {
                    continue;
                }

                $currentValue = $block->properties[$bg_property];
                // skip all optimisation if gradient() somewhere
                if (stripos($currentValue, "gradient(") !== false) {
                    return $block->properties;
                }

                // Skip some properties if there is no background image
                if ((!isset($bg_img_array[$i]) || $bg_img_array[$i] === 'none')
                                && ($bg_property === 'background-size' || $bg_property === 'background-position'
                                || $bg_property === 'background-attachment' || $bg_property === 'background-repeat')) {
                    continue;
                }

                // Remove !important
                if (CSSTidy::isImportant($currentValue)) {
                    $important = ' !important';
                    $currentValue = CSSTidy::removeImportant($currentValue, false);
                }

                // Do not add default values
                if ($currentValue === $defaultValue) {
                    continue;
                }

                $temp = $this->explodeWs(',', $currentValue);

                if (isset($temp[$i])) {
                    if ($bg_property === 'background-size') {
                        $newBackgroundValue .= '(' . $temp[$i] . ') ';
                    } else {
                        $newBackgroundValue .= $temp[$i] . ' ';
                    }
                }
            }

            $newBackgroundValue = trim($newBackgroundValue);
            if ($i != $numberOfValues - 1) {
                $newBackgroundValue .= ',';
            }
        }

        // Delete all background-properties
        foreach (self::$backgroundPropDefault as $bg_property => $foo) {
            unset($block->properties[$bg_property]);
        }

        // Add new background property
        if ($newBackgroundValue !== '') {
            $block->properties['background'] = $newBackgroundValue . $important;
        } else if (isset($block->properties['background'])) {
            $block->properties['background'] = 'none';
        }
    }

    /**
     * Dissolve font property
     * @param string $value
     * @return array
     * @version 1.3
     * @see merge_font()
     */
    protected function dissolveShortFont($value)
    {
        static $fontWeight = array('normal', 'bold', 'bolder', 'lighter', 100, 200, 300, 400, 500, 600, 700, 800, 900);
        static $fontVariant = array('normal', 'small-caps');
        static $fontStyle = array('normal', 'italic', 'oblique');

        $important = '';
        if (CSSTidy::isImportant($value)) {
            $important = '!important';
            $value = CSSTidy::removeImportant($value, false);
        }

        $return = array(
            'font-style' => null,
            'font-variant' => null,
            'font-weight' => null,
            'font-size' => null,
            'line-height' => null,
            'font-family' => null
        );

        $have = array(
            'style' => false,
            'variant' => false,
            'weight' => false,
            'size' => false,
        );

        // Detects if font-family consists of several words w/o quotes
        $multiwords = false;

        // Workaround with multiple font-family
        $value = $this->explodeWs(',', trim($value));

        $beforeColon = array_shift($value);
        $beforeColon = $this->explodeWs(' ', trim($beforeColon));

        foreach ($beforeColon as $propertyValue) {
            if ($have['weight'] === false && in_array($propertyValue, $fontWeight, true)) {
                $return['font-weight'] = $propertyValue;
                $have['weight'] = true;
            } else if ($have['variant'] === false && in_array($propertyValue, $fontVariant)) {
                $return['font-variant'] = $propertyValue;
                $have['variant'] = true;
            } else if ($have['style'] === false && in_array($propertyValue, $fontStyle)) {
                $return['font-style'] = $propertyValue;
                $have['style'] = true;
            } else if ($have['size'] === false && (is_numeric($propertyValue{0}) || $propertyValue{0} === null || $propertyValue{0} === '.')) {
                $size = $this->explodeWs('/', trim($propertyValue));
                $return['font-size'] = $size[0];
                if (isset($size[1])) {
                    $return['line-height'] = $size[1];
                } else {
                    $return['line-height'] = ''; // don't add 'normal' !
                }
                $have['size'] = true;
            } else {
                if (isset($return['font-family'])) {
                    $return['font-family'] .= ' ' . $propertyValue;
                    $multiwords = true;
                } else {
                    $return['font-family'] = $propertyValue;
                }
            }
        }
        // add quotes if we have several words in font-family
        if ($multiwords !== false) {
            $return['font-family'] = '"' . $return['font-family'] . '"';
        }

        foreach ($value as $fontFamily) {
            $return['font-family'] .= ',' . trim($fontFamily);
        }

        // Fix for 100 and more font-size
        if ($have['size'] === false && isset($return['font-weight']) &&
                        is_numeric($return['font-weight']{0})) {
            $return['font-size'] = $return['font-weight'];
            unset($return['font-weight']);
        }

        foreach (self::$fontPropDefault as $fontProperty => $defaultValue) {
            if (isset($return[$fontProperty])) {
                $return[$fontProperty] = $return[$fontProperty] . $important;
            } else {
                $return[$fontProperty] = $defaultValue . $important;
            }
        }

        return $return;
    }

    /**
     * Merge font properties into font shorthand
     * @todo: refactor
     * @param Element $block
     */
    protected function mergeFont(Block $block)
    {
        $newFontValue = '';
        $important = '';
        $preserveFontVariant = false;

        // Skip if is font-size not set
        if (isset($block->properties['font-size'])) {
            foreach (self::$fontPropDefault as $fontProperty => $defaultValue) {

                // Skip if property does not exist
                if (!isset($block->properties[$fontProperty])) {
                    continue;
                }

                $currentValue = $block->properties[$fontProperty];

                /**
                 * Skip if default value is used or if font-variant property is not small-caps
                 * @see http://www.w3.org/TR/css3-fonts/#propdef-font
                */
                if ($currentValue === $defaultValue) {
                    continue;
                } else if ($fontProperty === 'font-variant' && $currentValue !== 'small-caps') {
                    $preserveFontVariant = true;
                    continue;
                }

                // Remove !important
                if (CSSTidy::isImportant($currentValue)) {
                    $important = '!important';
                    $currentValue = CSSTidy::removeImportant($currentValue, false);
                }

                $newFontValue .= $currentValue;

                if ($fontProperty === 'font-size' &&
                    isset($block->properties['line-height']) &&
                    $block->properties['line-height'] !== ''
                ) {
                    $newFontValue .= '/';
                } else {
                    $newFontValue .= ' ';
                }
            }

            $newFontValue = trim($newFontValue);

            if ($newFontValue !== '') {
                // Delete all font-properties
                foreach (self::$fontPropDefault as $fontProperty => $defaultValue) {
                    if (!($fontProperty === 'font-variant' && $preserveFontVariant) && $fontProperty !== 'font') {
                        unset($block->properties[$fontProperty]);
                    }
                }

                // Add new font property
                $block->properties['font'] = $newFontValue . $important;
            }
        }
    }

    /**
     * Compress color inside gradient definition
     * @param string $string
     * @return string
     */
    protected function optimizeGradients($string)
    {
        /*
         * Gradient functions and color start from
         * -webkit-gradient syntax is not supported, because is deprecated
         */
        static $supportedGradients = array(
            'repeating-linear-gradient' => 1,
            'linear-gradient' => 1,
            'repeating-radial-gradient' => 2,
            'radial-gradient' => 2,
        );

        $originalType = strstr($string, '(', true);
        $type = $this->removeVendorPrefix($originalType);

        if ($type === false || !isset($supportedGradients[$type])) {
            return $string; // value is not gradient or unsupported type
        }

        $string = substr($string, strlen($originalType) + 1, -1); // Remove linear-gradient()
        $parts = $this->explodeWs(',', $string);

        $start = $supportedGradients[$type];
        foreach ($parts as $i => &$part) {
            if ($i < $start) {
                continue;
            }

            $colorAndLength = $this->explodeWs(' ', $part);
            $colorAndLength[0] = $this->cutColor($colorAndLength[0]);
            $part = implode(' ', $colorAndLength);
        }

        return "$originalType(" . implode(',', $parts) . ')';
    }

    /**
     * Optimize calc(), min(), max()
     *
     * @see http://www.w3.org/TR/css3-values/#calc
     * @param string $string
     * @return string
     */
    protected function optimizeCalc($string)
    {
        static $supportedTypes = array('min' => true, 'max' => true, 'calc' => true);

        $type = strstr($string, '(', true);

        if ($type === false || !isset($supportedTypes[$type])) {
            return $string;
        }

        $string = substr($string, strlen($type) + 1, -1); // Remove calc()
        $parts = $this->explodeWs(',', $string);

        foreach ($parts as &$part) {
            $part = str_replace(' ', '', $part);
        }

        return "$type(" . implode(',', $parts) . ')';
    }

    /**
     * @param $string
     * @return string
     */
    protected function optimizeTransform($string)
    {
        static $supportedTypes = array(
            'perspective' => true,
            'matrix' => true,
            'matrix3d' => true,
            'translate' => true,
            'translate3d' => true,
            'translateX' => true,
            'translateY' => true,
            'translateZ' => true,
            'scale3d' => true,
            'scaleX' => true,
            'scaleY' => true,
            'scaleZ' => true,
            'rotate3d' => true,
            'rotateX' => true,
            'rotateY' => true,
            'rotateZ' => true,
            'rotate' => true,
            'skewX' => true,
            'skewY' => true,
            'skew' => true,
        );

        $functions = $this->explodeWs(' ', $string);

        $output = array();
        foreach ($functions as $function) {
            $type = strstr($function, '(', true);

            if ($type === false || !isset($supportedTypes[$type])) {
                $output[] = $function;
                continue;
            }

            $function = substr($function, strlen($type) + 1, -1); // Remove function()
            $parts = $this->explodeWs(',', $function);

            foreach ($parts as &$part) {
                $part = $this->compressNumbers(null, $part);
            }

            $output[$type] = implode(',', $parts);
        }

        // 3D transform
        foreach (array('scale', 'translate') as $mergeFunction) {
            if (isset($output[$mergeFunction . 'X']) && isset($output[$mergeFunction . 'Y']) && isset($output[$mergeFunction . 'Z'])) {
                $output[$mergeFunction . '3d'] = "{$output[$mergeFunction . 'X']},{$output[$mergeFunction . 'Y']},{$output[$mergeFunction . 'Z']}";
                unset($output[$mergeFunction . 'X'], $output[$mergeFunction . 'Y'], $output[$mergeFunction . 'Z']);
            }
        }

        // 2D transform
        foreach (array('skew', 'scale', 'translate', 'rotate') as $mergeFunction) {
            if (isset($output[$mergeFunction . 'X']) && isset($output[$mergeFunction . 'Y'])) {
                $output[$mergeFunction] = "{$output[$mergeFunction . 'X']},{$output[$mergeFunction . 'Y']}";
                unset($output[$mergeFunction . 'X'], $output[$mergeFunction . 'Y']);
            }
        }

        $outputString = '';
        foreach ($output as $name => $value) {
            if (is_numeric($name)) {
                $outputString .= $value . ' ';
            } else {
                $outputString .= "$name($value) ";
            }
        }

        return rtrim($outputString);
    }

    /**
     * Convert unit to greather with shorter value
     *
     * For example 100px is converted to 75pt and 10mm to 1cm
     *
     * @see http://www.w3.org/TR/css3-values/#absolute-lengths
     * @param string $value
     * @param string $unit
     * @return array [value, unit]
     */
    protected function unitConvert($value, $unit)
    {
        $convert = array(
            // Absolute lengths
            'px' => array(0.75, 'pt'),
            'pt' => array(1/12, 'pc'),
            'mm' => array(6/25.4,'pc'),
            'pc' => array(2.54/6, 'cm'),
            'cm' => array(1/2.54, 'in'),

            // Frequency
            'hz' => array(0.001, 'khz'),

            // Angle, radians are ugly
            'grad' => array(0.9, 'deg'),
            //'deg' => array(1/360, 'turn'), // turn unit is not supported by major browser

            // Time
            'ms' => array(0.001, 's'),
        );

        $options = array($unit => $value);
        while (isset($convert[$unit])) {
            list($coefficient , $unit) = $convert[$unit];
            $options[$unit] = $value *= $coefficient;
        }

        // Find smaller string with unit
        $smaller = 0;
        $smallerUnit = '';
        foreach ($options as $unit => $value) {
            $current = strlen($value . $unit);
            if ($current < $smaller || $smaller === 0) {
                $smaller = $current;
                $smallerUnit = $unit;
            }
        }

        return array($options[$smallerUnit], $smallerUnit);
    }

    /**
     * Check is string is valid 3 or 6 character color value without # character
     * @param string $string HEX color value
     * @return bool
     */
    protected function checkHexValue($string)
    {
        $size = strlen($string);

        if ($size !== 3 && $size !== 6) {
            return false;
        }

        return ctype_xdigit($string);
    }

     /**
     * Explodes a string as explode() does, however, not if $sep is escaped or within a string.
     * @param string $sep separator
     * @param string $string
     * @return array
     */
    protected function explodeWs($sep, $string)
    {
        if ($string === '' || $string === $sep) {
            return array();
        }

        $insideString = false;
        $to = '';
        $output = array(0 => '');
        $num = 0;

        for ($i = 0, $len = strlen($string); $i < $len; $i++) {
            if ($insideString) {
                if ($string{$i} === $to && !CSSTidy::escaped($string, $i)) {
                    $insideString = false;
                }
            } else {
                if ($string{$i} === $sep && !CSSTidy::escaped($string, $i)) {
                    ++$num;
                    $output[$num] = '';
                    continue;
                } else if ($string{$i} === '"' || $string{$i} === '\'' || $string{$i} === '(' && !CSSTidy::escaped($string, $i)) {
                    $insideString = true;
                    $to = ($string{$i} === '(') ? ')' : $string{$i};
                }
            }

            $output[$num] .= $string{$i};
        }

        return $output;
    }

    /**
     * @param string $string
     * @return string
     */
    protected function removeVendorPrefix($string)
    {
        if ($string{0} === '-') {
            $pos = strpos($string, '-', 1);
            return substr($string, $pos + 1);
        }

        return $string;
    }
}