<?php
/**
 * CSSTidy - CSS Parser and Optimiser
 *
 * CSS Optimising Class
 * This class optimises CSS data generated by csstidy.
 *
 * Copyright 2005, 2006, 2007 Florian Schmitz
 *
 * This file is part of CSSTidy.
 *
 *   CSSTidy is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU Lesser General Public License as published by
 *   the Free Software Foundation; either version 2.1 of the License, or
 *   (at your option) any later version.
 *
 *   CSSTidy is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU Lesser General Public License for more details.
 *
 *   You should have received a copy of the GNU Lesser General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @license http://opensource.org/licenses/lgpl-license.php GNU Lesser General Public License
 * @package csstidy
 * @author Florian Schmitz (floele at gmail dot com) 2005-2007
 * @author Brett Zamir (brettz9 at yahoo dot com) 2007
 * @author Nikolay Matsievsky (speed at webo dot name) 2009-2010
 * @author Jakub Onderka (acci at acci dot cz) 2011
 */
namespace CSSTidy;

/**
 * @property $cssLevel
 * @property $templateName
 */
class Configuration
{
    // Constants for optimiseShorthands
    /*
      1 common shorthands optimization
      2 + font property optimization
      3 + background property optimization
     */
    const COMMON = 1,
        FONT = 2,
        BACKGROUND = 3;

    const DO_NOT_CHANGE = 0,
        SEPARATE_SELECTORS = 1,
        MERGE_SELECTORS = 2;

    // Constants for cssLevel
    const CSS1_0 = 'CSS1.0',
        CSS2_0 = 'CSS2.0',
        CSS2_1 = 'CSS2.1',
        CSS3_0 = 'CSS3.0';

    // Constants for template
    const DEFAULT_COMPRESSION = 'default',
        HIGHEST_COMPRESSION = 'highest_compression',
        HIGH_COMPRESSION = 'high_compression',
        LOW_COMPRESSION = 'low_compression',
        OWN_COMPRESSION = 'own_compression';

    const NONE = 0,
        LOWERCASE = 1,
        UPPERCASE = 2;

    public $preserveCss = false;

    /* rewrite all properties with low case, better for later gzip OK, safe*/
    public $caseProperties = self::LOWERCASE;

    /** @var bool */
    public $lowerCaseSelectors = false;

    /** @var bool */
    public $removeLastSemicolon = true;

    /** @var bool */
    public $removeBackSlash = true;

    /* is dangeroues to be used: CSS is broken sometimes */
    public $mergeSelectors = self::DO_NOT_CHANGE;

    /* sort properties in alpabetic order, better for later gzip
     * but can cause trouble in case of overiding same propertie or using hack
     */
    public $sortProperties = false;

    /*
      1, 3, 5, etc -- enable sorting selectors inside @media: a{}b{}c{}
      2, 5, 8, etc -- enable sorting selectors inside one CSS declaration: a,b,c{}
      preserve order by default cause it can break functionality
     */
    public $sortSelectors = 0;

    /** @var bool */
    public $discardInvalidProperties = false;

    /* preserve or not browser hacks */
    public $discardInvalidSelectors = false;

    /** @var int */
    public $optimiseShorthands = self::COMMON;

    /** @var bool */
    public $compressFontWeight = true;

    /** @var bool */
    public $compressColors = true;

    /** @var bool */
    public $timestamp = false;

    /** @var string */
    protected $cssLevel = self::CSS2_1;

    /** @var string */
    protected $templateName = self::DEFAULT_COMPRESSION;

    /** @var array */
    protected $template = array();

    /**
     * @param array $configuration
     */
    public function __construct(array $configuration = array())
    {
        static $oldToNew = array(
            'sort_properties' => 'sortProperties',
            'sort_selectors' => 'sortSelectors',
            'discard_invalid_properties' => 'discardInvalidProperties',
            'discard_invalid_selectors' => 'discardInvalidSelectors',
            'optimise_shorthands' => 'optimiseShorthands',
            'css_level' => 'cssLevel',
            'merge_selectors' => 'mergeSelectors',
            'compress_font-weight' => 'compressFontWeight',
        );

        foreach ($oldToNew as $old => $new) {
            if (isset($configuration[$old])) {
                $this->$new = $configuration[$old];
            }
        }

        if (isset($configuration['template'])) {
            switch ($configuration['template']) {
                case 'highest':
                    $this->setTemplateName(self::HIGHEST_COMPRESSION);
                    break;

                case 'high':
                    $this->setTemplateName(self::HIGH_COMPRESSION);
                    break;

                case 'low':
                    $this->setTemplateName(self::LOW_COMPRESSION);
                    break;

                default:
                    $this->loadTemplateFromFile($configuration['template']);
            }
        }
    }

    /**
     * @param string $cssLevel
     * @throws \Exception
     */
    protected function setCssLevel($cssLevel)
    {
        if (!in_array($cssLevel, array(self::CSS1_0, self::CSS2_0, self::CSS2_1, self::CSS3_0))) {
            throw new \Exception("CSS level must be CSS1.0, CSS2.0, CSS2.1 or CSS3.0, '$cssLevel' given'");
        }

        $this->cssLevel = $cssLevel;
    }
    
    protected function getPredefinedTemplates()
    {
        $template = array();
        
        $template[self::DEFAULT_COMPRESSION] = array(
            '<span class="at">', //string before @rule 
            '</span> <span class="format">{</span>'."\n", //bracket after @-rule
            '<span class="selector">', //string before selector
            '</span> <span class="format">{</span>'."\n", //bracket after selector
            '<span class="property">', //string before property
            '</span><span class="value">', //string after property+before value
            '</span><span class="format">;</span>'."\n", //string after value
            '<span class="format">}</span>', //closing bracket - selector
            "\n\n", //space between blocks {...}
            "\n".'<span class="format">}</span>'. "\n\n", //closing bracket @-rule
            '', //indent in @-rule
            '<span class="comment">', // before comment
            '</span>'."\n", // after comment
            "\n", // after last line @-rule
        );
        
        $template[self::HIGH_COMPRESSION] = array(
            '<span class="at">',
            '</span> <span class="format">{</span>'."\n",
            '<span class="selector">',
            '</span><span class="format">{</span>',
            '<span class="property">',
            '</span><span class="value">',
            '</span><span class="format">;</span>',
            '<span class="format">}</span>',
            "\n",
            "\n". '<span class="format">}'."\n".'</span>',
            '',
            '<span class="comment">', // before comment
            '</span>', // after comment
            "\n",
        );
        
        $template[self::HIGHEST_COMPRESSION] = array(
            '<span class="at">',
            '</span><span class="format">{</span>',
            '<span class="selector">',
            '</span><span class="format">{</span>',
            '<span class="property">',
            '</span><span class="value">',
            '</span><span class="format">;</span>',
            '<span class="format">}</span>',
            '',
            '<span class="format">}</span>',
            '',
            '<span class="comment">', // before comment
            '</span>', // after comment
            '',
        );
        
        $template[self::LOW_COMPRESSION] = array(
            '<span class="at">',
            '</span> <span class="format">{</span>'."\n",
            '<span class="selector">',
            '</span>'."\n".'<span class="format">{</span>'."\n",
            '	<span class="property">',
            '</span><span class="value">',
            '</span><span class="format">;</span>'."\n",
            '<span class="format">}</span>',
            "\n\n",
            "\n".'<span class="format">}</span>'."\n\n",
            '	',
            '<span class="comment">', // before comment
            '</span>'."\n", // after comment
            "\n",
        );
        
        return $template;
    }

    /**
     * @param string $name
     * @throws \Exception
     */
	public function setTemplateName($name)
    {
        $predefinedTemplates = $this->getPredefinedTemplates();

		if (isset($predefinedTemplates[$name])) {
			$this->template = $predefinedTemplates[$name];
            $this->templateName = $name;
		} else {
            throw new \Exception("Template with name '$name' not exists");
        }
	}

    /**
     * @param string $filename
     * @throws \Exception
     */
    public function loadTemplateFromFile($filename)
    {
        $content = file_get_contents($filename);

        if (!$content) {
            throw new \Exception("Template file $filename cannot be loaded");
        }

        $this->setTemplateFromString($content);
    }

    public function setTemplateFromString($content)
    {
        $content = strip_tags($content, '<span>');

		$content = str_replace("\r\n", "\n", $content); // Unify newlines (because the output also only uses \n)
		$this->template = explode('|', $content);
        $this->templateName = self::OWN_COMPRESSION;
    }

    /**
     * @return array
     */
    public function getTemplate()
    {
        if (empty($this->template)) {
            $this->setTemplateName($this->templateName);
        }

        return $this->template;
    }

    /**
     * @param string $name
     * @return mixed
     * @throws \Exception
     */
    public function __get($name)
    {
        if (isset($this->$name)) {
            return $this->$name;
        }

        throw new \Exception("Undefined config value '$name''");
    }

    /**
     * @param string $name
     * @param mixed $value
     * @throws \Exception
     */
    public function __set($name, $value)
    {
        $functionName = 'set' . ucfirst($name);
        if (is_callable(array($this, $functionName))) {
            $this->$functionName($value);
        } else if (isset($this->$name)) {
            $this->$name = $value;
        } else {
            throw new \Exception("Undefined config value '$name''");
        }
    }
}